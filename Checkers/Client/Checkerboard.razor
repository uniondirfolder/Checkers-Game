@using Checkers.Client.Data

@code{
    List<Checker> blackCheckers = new();
    List<Checker> whiteCheckers = new();

    protected override void OnInitialized()
    {
        for (int i = 0; i < 3; i++)
        {
            for (int j = (i+1)%2; j < 8; j+=2)
            {
                blackCheckers.Add(new Checker
                {
                    Color = "black",
                    Column = j,
                    Row = i,
                    Direction = CheckerDirection.Down
                });
            }
        }

        for (int i = 5; i < 8; i++)
        {
            for (int j = (i + 1) % 2; j < 8; j += 2)
            {
                blackCheckers.Add(new Checker
                {
                    Color = "white",
                    Column = j,
                    Row = i,
                    Direction = CheckerDirection.Up
                });
            }
        }
    }



    Checker activeUnit = null;
    List<int> rowsPossible = new();
    List<int> columsPossible = new();


    void EvaluateCheckerSpots()
    {
        rowsPossible.Clear(); columsPossible.Clear();

        if (activeUnit != null)
        {
            rowsPossible.Add(activeUnit.Row + (1 * (activeUnit.Direction == CheckerDirection.Down ? 1 : -1)));
            columsPossible.Add(activeUnit.Column - 1);
            columsPossible.Add(activeUnit.Column + 1);
        }
    }

    void MoveChecker(int row, int column){
        bool canMoveHere = rowsPossible.Contains(row) && columsPossible.Contains(column);
        if (!canMoveHere)
            return;
        activeUnit.Column = column;
        activeUnit.Row = row;
        activeUnit = null;
        EvaluateCheckerSpots();
    }
}



@for (int i = 0; i < 8; i++)
{
    int localI = i;
    <div class="row">
        @for (int j = 0; j < 8; j++)
        {
            int localJ = j;
            Checker unit = blackCheckers.FirstOrDefault(x => x.Column == j && x.Row == i);
            if (unit==null)
            {
                unit = whiteCheckers.FirstOrDefault(x => x.Column == j && x.Row == i);
            }

            bool canMoveHere = rowsPossible.Contains(i) && columsPossible.Contains(j);

            <div @onclick="()=>MoveChecker(localI,localJ)" class="cell @(canMoveHere ? "active" : "")">
                @if (unit != null)
                {
                    <div @onclick="()=> { activeUnit = unit; EvaluateCheckerSpots(); }"
                         class="checker @unit.Color @(unit == activeUnit?"active":"")"></div>
                }
            </div>
        }
    </div>
}
